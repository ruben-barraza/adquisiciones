<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Proveedormodel extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get proveedor by id
     */
    function get_proveedor($id)
    {
        return $this->db->get_where('proveedor',array('id'=>$id))->row_array();
    }
    
    /*
     * Get all listaproveedor
     */
    function get_all_listaproveedor()
    {
        return $this->db->get('proveedor')->result_array();
    }
    
    /*
     * function to add new proveedor
     */
	
	function add_proveedor($params)
    {
		$params['id'] = $this->get_idConsecutivo();
        $this->db->insert('proveedor',$params);
        return $this->db->insert_id();
    }
    
    function get_idConsecutivo()
    {
		$maxid = 1;
        $row = $this->db->query("select max(id) as 'maxid' from proveedor")->row();
		if ($row) {
			$maxid = $row->maxid + 1;
		}
		return $maxid;
	}

    /*
     * funciÃ³n para guardar en la tabla relacionproveedofamilia
     */
    function add_uk_proveedor_familia($id, $params){
        foreach($params as $clave){
            $this->db->select('id')->from('familia')->where('clave', $clave);
            $valor = $this->db->get();

            $vl = $valor->row_array();
            $familia = $vl['id'];

            $this->db->insert('relacionproveedorfamilia', array(
                'idProveedor' => $id,
                'idFamilia' => $familia
            ));
        }    
    }

    /*
     * function to update proveedor
     */
    function update_proveedor($id,$params)
    {
        $this->db->where('id',$id);
        $response = $this->db->update('proveedor',$params);
        if($response)
        {
            return "proveedor updated successfully";
        }
        else
        {
            return "Error occuring while updating proveedor";
        }
    }
    
    /*
     * function to delete proveedor
     */
    function delete_proveedor($id)
    {
        $response = $this->db->delete('proveedor',array('id'=>$id));
        if($response)
        {
            return "proveedor deleted successfully";
        }
        else
        {
            return "Error occuring while deleting proveedor";
        }
    }

    /*
     * funciÃ³n para obtener el estado seleccionado de la base de datos
     */
     public function editEstados($idProveedor) {
        $this->db->select('idMunicipio')->from('proveedor')->where('id', $idProveedor);
        $valorMunicipio = $this->db->get();
        $vlMunicipio = $valorMunicipio->row_array();
        $municipio = $vlMunicipio['idMunicipio'];

        $this->db->select('idEstado')->from('municipio')->where('id', $municipio);
        $valorEstado = $this->db->get('estado');
        $vlEstado = $valorEstado->row_array();
        $estado = $vlEstado['idEstado'];
    }

    public function obtenerStringMunicipio($idMunicipio) {
        $this->db->select('nombre')->from('municipio')->where('id', $idMunicipio);
        $valor = $this->db->get();
        $vl = $valor->row_array();
        return $vl['nombre'];
    }

    public function obtenerStringEstado($idMunicipio){
        $this->db->select('idEstado')->from('municipio')->where('id', $idMunicipio);
        $valor = $this->db->get();
        $vl = $valor->row_array();
        $idEstado = $vl['idEstado'];

        $this->db->select('nombre')->from('estado')->where('id', $idEstado);
        $valorEstado = $this->db->get();
        $vlEstado = $valorEstado->row_array();
        return $vlEstado['nombre'];    
    }
     
}
