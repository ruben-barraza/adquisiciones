<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Pogeneralmodel extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get po_general by id
     */
    function get_po_general($id)
    {
        return $this->db->get_where('po_general',array('id'=>$id))->row_array();
    }
    
    /*
     * Get all listapo_general
     */
    function get_all_listapo_general()
    {
        //return $this->db->get('po_general')->result_array();
        $this->db->select('po_general.id, po_general.tipo, familia.descripcion, im_general.titulo, po_general.fechaElaboracion, CONCAT(empleado.titulo, " ", empleado.nombre, " ", empleado.apellidoPaterno, " ", empleado.apellidoMaterno) AS nombre');
        $this->db->from('po_general');
        $this->db->join('familia', 'familia.id = po_general.idFamilia', 'inner');
        $this->db->join('im_general', 'im_general.idPog = po_general.id', 'inner');
        $this->db->join('empleado', 'empleado.id = po_general.idEmpleadoResponsable', 'inner');
        $this->db->order_by('po_general.fechaElaboracion', 'desc');
        $query = $this->db->get();
        return $query->result_array();
        
    }

    function get_all_listapo_general_familia($clave)
    {
        //return $this->db->get('po_general')->result_array();
        $this->db->select('po_general.id, po_general.tipo, familia.clave, familia.descripcion,im_general.titulo, po_general.fechaElaboracion, CONCAT(empleado.titulo, " ", empleado.nombre, " ", empleado.apellidoPaterno, " ", empleado.apellidoMaterno) AS nombre');
        $this->db->from('po_general');
        $this->db->join('familia', 'familia.id = po_general.idFamilia', 'inner');
        $this->db->join('im_general', 'im_general.idPog = po_general.id', 'inner');
        $this->db->join('empleado', 'empleado.id = po_general.idEmpleadoResponsable', 'inner');
        $this->db->where('familia.clave', $clave);
        $this->db->order_by('po_general.fechaElaboracion', 'desc');
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }
    
    function get_all_listapo_general_desc()
    {
        $this->db->from('po_general');
        $this->db->order_by("id", "desc");
        $query = $this->db->get(); 
        return $query->result_array();
    }

    function get_poc_inicial()
    {
        $this->db->select('tiempopago, condicionprecio, moneda, porcentajegarantia, penaconvencional, maxpenalizacion, deducciones, entregaanticipada, vigenciacotizacion');
        $this->db->from('po_general');
        $this->db->order_by("id", "desc");
        $this->db->limit(0,1);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_poc_edit($id){
        $this->db->select('tiempopago, condicionprecio, moneda, porcentajegarantia, penaconvencional, maxpenalizacion, deducciones, entregaanticipada, vigenciacotizacion');
        $this->db->from('po_general');
        $this->db->where('id', $id);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    /*
     * function to add new po_general
     */
	
	function add_po_general($params)
    {
		$params['id'] = $this->get_idConsecutivo();
        $this->db->insert('po_general',$params);
        return $this->db->insert_id();
    }

    function add_im_general($params)
    {
        $this->db->insert('im_general',$params);
    }

    function update_im_general($params, $idPog)
    {
        $this->db->where('id', $idPog);
        $this->db->update('im_general',$params);
    }
    
    function add_im_concepto($params)
    {
        $params['id'] = $this->get_idConsecutivoImc();
        $this->db->insert('im_concepto',$params);
    }

    function update_im_concepto($idImc, $params)
    {
        $this->db->where('id', $idImc);
        $this->db->update('im_concepto',$params);
    }

    function add_numero_oficio($params)
    {
        $this->db->insert('po_numoficio',$params);
    }

    function get_numero_oficioConsecutivo($elaboracionYear){
        $this->db->select('numOficio');
        $this->db->from('po_numoficio');
        $this->db->where('anio', $elaboracionYear);
        $this->db->order_by('numOficio', 'DESC');
        $this->db->limit(1);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->row('numOficio') + 1;
        } else {
            return 0;
        }

    }

    function get_numero_oficiosCreados($elaboracionYear){
        $this->db->select('numOficio');
        $this->db->from('po_numoficio');
        $this->db->where('anio', $elaboracionYear);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->num_rows();
        } else {
            return 0;
        }
    }

    function get_year_maximo($elaboracionYear){
        $maxyear = $elaboracionYear;
        $row = $this->db->query("select max(anio) as 'maxanio' from po_numoficio")->row();
        if ($row) {
			$maxyear = $row->maxanio;
		}
        return $maxyear;
    }

    function add_uk_po_aclaracion_acuse($idPog, $idEmpleado)
    {
        $this->db->insert('po_acuse', array(
            'idPog' => $idPog,
            'idEmpleado' => $idEmpleado
        ));

        $this->db->insert('po_aclaracion', array(
            'idPog' => $idPog,
            'idEmpleado' => $idEmpleado
        ));
    }

    function add_relacion_pog_proveedor($idPog, $idProveedor, $numContacto){
        $this->db->insert('po_proveedor', array(
            'idPog' => $idPog,
            'idProveedor' => $idProveedor,
            'contacto' => $numContacto
        ));
    }

    function edit_relacion_pog_proveedor($idPog, $idProveedor, $numContacto){
        $this->db->replace('po_proveedor', array(
            'idPog' => $idPog,
            'idProveedor' => $idProveedor,
            'contacto' => $numContacto
        ));
    }

    function get_idConsecutivo()
    {
		$maxid = 1;
        $row = $this->db->query("select max(id) as 'maxid' from po_general")->row();
		if ($row) {
			$maxid = $row->maxid + 1;
		}
		return $maxid;
	}
    

    function get_idConsecutivoImg()
    {
		$maxid = 1;
        $row = $this->db->query("select max(id) as 'maxid' from im_general")->row();
		if ($row) {
			$maxid = $row->maxid + 1;
		}
		return $maxid;
	}


    function get_idConsecutivoImc()
    {
		$maxid = 1;
        $row = $this->db->query("select max(id) as 'maxid' from im_concepto")->row();
		if ($row) {
			$maxid = $row->maxid + 1;
		}
		return $maxid;
	}

    function get_idEmpleado($rpe)
    {
        $this->db->select('id');
        $this->db->from('empleado');
        $this->db->where('rpe', $rpe);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_idProveedor($clave)
    {
        $this->db->select('id');
        $this->db->from('proveedor');
        $this->db->where('clave', $clave);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_idArticulo($codigo)
    {
        $this->db->select('id');
        $this->db->from('articulo');
        $this->db->where('codigo', $codigo);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_idImc($idPog, $idArticulo, $idProveedor){
        $this->db->select('id');
        $this->db->from('im_concepto');
        $this->db->where('idPog', $idPog);
        $this->db->where('idArticulo', $idArticulo);
        $this->db->where('idProveedor', $idProveedor);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            $vl = $query->row_array();
            return $vl['id'];
        } else {
            return 0;
        }

    }

    function get_empleado($rpe)
    {
        $this->db->select('nombre, apellidoPaterno, apellidoMaterno');
        $this->db->from('empleado');
        $this->db->where('rpe', $rpe);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_all_listaproveedorfamilia($idFamilia)
    {
        $this->db->select('proveedor.clave, proveedor.razonSocial, proveedor.direccion, proveedor.nombre1, proveedor.nombre2, proveedor.nombre3, proveedor.correoElectronico1, proveedor.correoElectronico2, proveedor.correoElectronico3');
        $this->db->from('proveedor');
        $this->db->join('relacionproveedorfamilia', 'relacionproveedorfamilia.idProveedor = proveedor.id', 'inner');
        $this->db->join('familia', 'familia.id = relacionproveedorfamilia.idFamilia', 'inner');
        $this->db->where('familia.id', $idFamilia);
        $this->db->order_by('proveedor.razonSocial');
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_all_listaproveedorservicio()
    {
        $this->db->select('proveedor.clave, proveedor.razonSocial, proveedor.direccion, proveedor.nombre1, proveedor.nombre2, proveedor.nombre3, proveedor.correoElectronico1, proveedor.correoElectronico2, proveedor.correoElectronico3');
        $this->db->from('proveedor');
        $this->db->where('proveedor.tipo', 'S');
        $this->db->or_where('proveedor.tipo', 'A');
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_direccionalmacen($idAlmacen)
    {
        $this->db->select('domicilio');
        $this->db->from('almacen');
        $this->db->where('id', $idAlmacen);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_all_listaarticulos($idFamilia)
    {
        $this->db->select('articulo.codigo, articulo.descripcion, articulo.tiempoEntrega, articulo.cantidadEmbalaje, unidadmedida.clave unidadmedida');
        $this->db->from('articulo');
        $this->db->join('unidadmedida', 'articulo.idUnidadMedida = unidadmedida.id', 'inner');
        $this->db->join('familia', 'articulo.idFamilia = familia.id', 'inner');
        $this->db->where('articulo.idFamilia', $idFamilia);
        $this->db->order_by('articulo.descripcion');
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_articulo_clave($codigo)
    {
        $this->db->select('articulo.codigo, articulo.descripcion, articulo.tiempoEntrega, articulo.cantidadEmbalaje, unidadmedida.clave unidadmedida');
        $this->db->from('articulo');
        $this->db->join('unidadmedida', 'articulo.idUnidadMedida = unidadmedida.id', 'inner');
        $this->db->join('familia', 'articulo.idFamilia = familia.id', 'inner');
        $this->db->where('articulo.codigo', $codigo);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    function get_proveedor_codigo($clave)
    {
        $this->db->select('proveedor.clave, proveedor.razonSocial, proveedor.direccion, proveedor.nombre1, proveedor.nombre2, proveedor.nombre3, proveedor.correoElectronico1, proveedor.correoElectronico2, proveedor.correoElectronico3');
        $this->db->from('proveedor');
        $this->db->where('proveedor.clave', $clave);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    //FUNCIONES NECESARIAS PARA EL EDIT

    public function getIdMunicipio($id)
    {
        $this->db->select('idMunicipio')->from('po_general')->where('id', $id);
        $valor = $this->db->get();
        $vl = $valor->row_array();
        return $vl['idMunicipio'];
    }

    public function getIdEstado($idMunicipio)
    {
        $this->db->select('idEstado')->from('municipio')->where('id', $idMunicipio);
        $valor = $this->db->get();
        $vl = $valor->row_array();
        return $vl['idEstado'];  
    }

    public function getEmpleadoResponsable($id)
    {
        $this->db->select('empleado.rpe, empleado.nombre, empleado.apellidoPaterno, empleado.apellidoMaterno');
        $this->db->from('po_general');
        $this->db->join('empleado', 'po_general.idEmpleadoResponsable = empleado.id', 'inner');
        $this->db->where('po_general.id', $id);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }

    }
    
    public function getEmpleadoFormula($id)
    {
        $this->db->select('empleado.rpe, empleado.nombre, empleado.apellidoPaterno, empleado.apellidoMaterno');
        $this->db->from('po_general');
        $this->db->join('empleado', 'po_general.idEmpleadoFormula = empleado.id', 'inner');
        $this->db->where('po_general.id', $id);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    public function getProveedoresPog($id)
    {
        $this->db->distinct();
        $this->db->select('proveedor.id, proveedor.clave, proveedor.razonSocial, proveedor.direccion, proveedor.nombre1, proveedor.correoElectronico1, proveedor.nombre2, proveedor.correoElectronico2, proveedor.nombre3, proveedor.correoElectronico3');
        $this->db->from('po_general');
        $this->db->join('po_proveedor', 'po_general.id = po_proveedor.idPog', 'inner');
        $this->db->join('proveedor', 'po_proveedor.idProveedor = proveedor.id', 'inner');
        $this->db->where('po_general.id', $id);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }

    public function getImTitulo($id)
    {
        $this->db->distinct();
        $this->db->select('titulo')->from('im_general')->where('idPog', $id);
         $valor = $this->db->get();
        $vl = $valor->row_array();
        return $vl['titulo'];
    }

    public function getImConcepto($id)
    {

        $this->db->select('im_concepto.id, im_concepto.partida, articulo.codigo, articulo.descripcion, unidadmedida.clave, im_concepto.plazoEntrega, im_concepto.cantidad, im_concepto.lugarEntrega, im_concepto.direccionEntrega, im_concepto.idAlmacen');
        $this->db->from('im_concepto');
        $this->db->join('articulo', 'im_concepto.idArticulo = articulo.id', 'inner');
        $this->db->join('unidadmedida', 'articulo.idUnidadMedida = unidadmedida.id', 'inner');
        $this->db->where('im_concepto.idPog', $id);
        $this->db->group_by("im_concepto.partida");
        $this->db->order_by("partida", "asc");
        $query = $this->db->get();
        if($query->num_rows() > 0){
            return $query->result_array();
        }
    }


    function edit_uk_po_aclaracion_acuse($id, $idEmpleado1, $idEmpleado2)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('po_aclaracion');

        $this->db->where('idPog', $id);
        $this->db->delete('po_acuse');

        $this->add_uk_po_aclaracion_acuse($id, $idEmpleado1);
        $this->add_uk_po_aclaracion_acuse($id, $idEmpleado2);
    }

    function delete_relaciones($id)
    {
        //$this->db->where('idPog', $id);
        //$this->db->delete('po_proveedor');

        $this->db->where('idPog', $id);
        $this->db->delete('po_numoficio');

        //$this->db->where('idPog', $id);
        //$this->db->delete('im_general');

        //$this->db->where('idPog', $id);
        //$this->db->delete('im_concepto');
    }

    /*
     * function to update po_general
     */
    function update_po_general($id,$params)
    {
        $this->db->where('id',$id);
        $response = $this->db->update('po_general',$params);
        if($response)
        {
            return "po_general updated successfully";
        }
        else
        {
            return "Error occuring while updating po_general";
        }
    }
    
    /*
     * function to delete po_general
     */
    function delete_po_general($id)
    {
        $response = $this->db->delete('po_general',array('id'=>$id));
        if($response)
        {
            return "po_general deleted successfully";
        }
        else
        {
            return "Error occuring while deleting po_general";
        }
    }

    function delete_po_proveedor($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('po_proveedor');
    }

    function delete_po_acuse($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('po_acuse');
    }

    function delete_po_aclaracion($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('po_aclaracion');
    }

    function delete_im_general($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('im_general');
    }

    function delete_im_concepto($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('im_concepto');
    }

    function delete_po_numoficio($id)
    {
        $this->db->where('idPog', $id);
        $this->db->delete('po_numoficio');
    }
}
